package data_management;

import com.alerts.Alert;
import com.alerts.AlertGenerator;
import com.alerts.strategy.*;
import com.data_management.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.List;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.*;

class AlertGeneratorTest {
    private DataStorage ds;

    @BeforeEach
    void setup() {
        ds = new DataStorage();
    }

    static class TestAlertGenerator extends AlertGenerator {
        List<Alert> triggered = new ArrayList<>();

        TestAlertGenerator(DataStorage ds) {
            super(ds);
        }

        // This method will be called by strategy classes when they detect an alert condition
        @Override
        public void evaluateData(Patient patient) {
            // Store all alerts generated by strategies
            List<PatientRecord> records = getRecentRecords(patient);

            if (records.isEmpty()) {
                return;
            }

            // Capture alerts from each strategy
            captureAlerts(new BloodPressureStrategy(), patient, records);
            captureAlerts(new OxygenSaturationStrategy(), patient, records);
            captureAlerts(new HeartRateStrategy(), patient, records);
            captureAlerts(new HypotensiveHypoxemiaStrategy(), patient, records);
            captureAlerts(new ManualAlertStrategy(), patient, records);
        }

        private List<PatientRecord> getRecentRecords(Patient patient) {
            long currentTime = System.currentTimeMillis();
            long dayAgo = currentTime - (24*60*60*1000);
            return patient.getRecords(dayAgo, currentTime);
        }

        private void captureAlerts(AlertStrategy strategy, Patient patient, List<PatientRecord> records) {
            // Add mock implementation to capture alerts
            strategy.setAlertHandler(alert -> triggered.add(alert));
            strategy.checkAlert(patient, records);
        }
    }

    @Test
    void testCriticalSystolicAlert() {
        long timestamp = System.currentTimeMillis();
        ds.addPatientData(1, 185.0, "SystolicPressure", timestamp);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("Critical Systolic")),
            "Should detect critical systolic pressure");
    }

    @Test
    void testBloodPressureTrendAlert() {
        long now = System.currentTimeMillis();

        // Increasing trend (120 -> 131 -> 142)
        ds.addPatientData(1, 120.0, "SystolicPressure", now - 2000);
        ds.addPatientData(1, 131.0, "SystolicPressure", now - 1000);
        ds.addPatientData(1, 142.0, "SystolicPressure", now);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
                a.getCondition().contains("Blood Pressure Trend")),
                "Should detect blood pressure trend");
    }

    @Test
    void testLowSaturationAlert() {
        long timestamp = System.currentTimeMillis();
        ds.addPatientData(1, 91.0, "Saturation", timestamp);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("Saturation")),
            "Should detect low saturation");
    }

    @Test
    void testRapidDropSaturationAlert() {
        long timestamp = System.currentTimeMillis();
        long baseTime = timestamp - (15 * 60 * 1000);

        ds.addPatientData(1, 97.0, "Saturation", baseTime - (10 * 60 * 1000));
        ds.addPatientData(1, 91.0, "Saturation", baseTime - (5 * 60 * 1000)); // drop by 6 in 5 min

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("Rapid Blood Saturation Drop")),
            "Should detect rapid saturation drop");
    }

    @Test
    void testHypotensiveHypoxemiaAlert() {
        long timestamp = System.currentTimeMillis();
        ds.addPatientData(1, 85.0, "SystolicPressure", timestamp);
        ds.addPatientData(1, 90.0, "Saturation", timestamp);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("Hypotensive")),
            "Should detect hypotensive hypoxemia");
    }

    @Test
    void testECGAbnormalPeakAlert() {
        long timestamp = System.currentTimeMillis();
        long baseTime = timestamp - 30_000L;

        // Add 10 normal ECG readings
        for (int i = 0; i < 10; i++) {
            ds.addPatientData(1, 1.0, "ECG", baseTime + i * 1000);
        }

        // Add a peak
        ds.addPatientData(1, 3.0, "ECG", baseTime + 20000L);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("ECG Abnormal Peak")),
            "Should detect abnormal ECG peak");
    }

    @Test
    void testManualTriggeredAlert() {
        long timestamp = System.currentTimeMillis();
        ds.addPatientData(1, 0.0, "Alert", timestamp);

        Patient patient = ds.getPatient(1);
        TestAlertGenerator ag = new TestAlertGenerator(ds);
        ag.evaluateData(patient);

        assertTrue(ag.triggered.stream().anyMatch(a ->
            a.getCondition().contains("Manual")),
            "Should detect manual alert");
    }
}